dados=read.table("dados.csv",header=T) # lê oconjunto de dados, primeira linha com o nome das variáveis. Adeque para o local onde está o arquivo energia.txt
View(dados)
View(dados)
dados=read.csv("dados.csv",header=T, sep = ',')
View(dados)
View(dados)
sink("relatorio.txt") # abre um arquivo de nome relatorio_energia.txt no diretório c://mad357. Todos os comandos "print" escreverão a saída neste arquivo.
reta_mq=lm(peso~ps_sistolica,data=dados) # ajusta o MRLS na base dados há três colunas: dados$data, dados$temperatura 3 dados$consumo. reta_mq recebe os resultados do ajuste
View(reta_mq)
print("Resultados do ajuste de minimos quadrados:")
print(summary(reta_mq))
summary(reta_mq)
summary(reta_mq)
sink()
summary(reta_mq)
dados=read.csv("dados.csv",header=T, sep = ',') # lê oconjunto de dados, primeira linha com o nome das variáveis. Adeque para o local onde está o arquivo energia.txt
sink("relatorio.txt") # abre um arquivo de nome relatorio_energia.txt no diretório c://mad357. Todos os comandos "print" escreverão a saída neste arquivo.
reta_mq=lm(ps_sistolica~peso,data=dados) # ajusta o MRLS na base dados há três colunas: dados$data, dados$temperatura 3 dados$consumo. reta_mq recebe os resultados do ajuste
print("Resultados do ajuste de minimos quadrados:")
print(summary(reta_mq))
aov_mq=aov(ps_sistolica~peso,data=dados) # calcula a análise de variância do MRLS. aov_mq recebe os resultados da ANOVA.
print("Tabela ANOVA do modelo ajustado:")
print(summary(aov_mq))
summary(reta_mq)
qmres=sum(reta_mq$residuals^2)/24 # quadrado médio dos resíduos (s2)
s=sqrt(qmres) # (s)
desviosx=dados$peso-mean(dados$peso) # desvios da média da temperatura
sxx=sum(desviosx^2) # soma de quadrados dos desvios da média
epb=s/sqrt(sxx) # erro padrão do beta
epa=s*sqrt(1/26+mean(dados$peso)^2/sxx) # erro padrão do intercepto
lim_inf95_b=reta_mq$coefficients[2]-epb*qt(0.975,24) # limite inferior do IC de 95% para beta
lim_sup95_b=reta_mq$coefficients[2]+epb*qt(0.975,24) # limite superior do IC de 95% para beta
lim_inf95_a=reta_mq$coefficients[1]-epa*qt(0.975,24) # limite inferior do IC de 95% para intercepto
lim_sup95_a=reta_mq$coefficients[1]+epa*qt(0.975,24) # limite superior do IC de 95% para intercepto
lim_inf95_sigma2=24*qmres/qchisq(0.975,24) # limite inferior do IC de 95% para sigma2
lim_sup95_sigma2=24*qmres/qchisq(0.025,24) # limite superior do IC de 95% para sigma2
print(c(lim_inf95_b,lim_sup95_b))
print(c(lim_inf95_a,lim_sup95_a))
print(c(lim_inf95_sigma2,lim_sup95_sigma2))
# Construção de gráficos
residuo_padronizado=(reta_mq$residuals-mean(reta_mq$residuals))/s
plot(dados$peso,dados$ps_sistolica,main="Diagrama de dispersao e reta de minimos quadrados",xlab="peso",ylab="pressão")
abline(reta_mq,lty=2)
points(mean(dados$peso),mean(dados$ps_sistolica),col="red")
win.graph()
par(mfrow=c(2,1))
plot(dados$peso,residuo_padronizado,main="Variavel explicativa versus Residuos padronizados",xlab="peso",ylab="residuos padronizados",ylim=c(-2.5,2.5))
abline(h=0,lty=2)
plot(reta_mq$fitted,residuo_padronizado,main="Valores ajustados versus Residuos padronizados",xlab="valores ajustados",ylab="residuos padronizados",ylim=c(-2.5,2.5))
abline(h=0,lty=2)
win.graph()
par(mfrow=c(2,1))
boxplot(residuo_padronizado,main="Boxplot dos residuos padronizados",ylim=c(-2.5,2.5))
qqnorm(residuo_padronizado,xlab="Quantis teoricos",ylab="Quantis amostrais",main="Normal plot dos residuos padronizados")
abline(0,1,lty=2)
abline(h=0,col="blue")
abline(v=0,col="blue")
sink()
dados=read.csv("dados.csv",header=T, sep = ',') # lê oconjunto de dados, primeira linha com o nome das variáveis. Adeque para o local onde está o arquivo energia.txt
sink("relatorio.txt") # abre um arquivo de nome relatorio_energia.txt no diretório c://mad357. Todos os comandos "print" escreverão a saída neste arquivo.
reta_mq=lm(ps_sistolica~peso,data=dados) # ajusta o MRLS na base dados há três colunas: dados$data, dados$temperatura 3 dados$consumo. reta_mq recebe os resultados do ajuste
print("Resultados do ajuste de minimos quadrados:")
print(summary(reta_mq))
aov_mq=aov(ps_sistolica~peso,data=dados) # calcula a análise de variância do MRLS. aov_mq recebe os resultados da ANOVA.
print("Tabela ANOVA do modelo ajustado:")
print(summary(aov_mq))
summary(reta_mq)
qmres=sum(reta_mq$residuals^2)/24 # quadrado médio dos resíduos (s2)
s=sqrt(qmres) # (s)
desviosx=dados$peso-mean(dados$peso) # desvios da média da temperatura
sxx=sum(desviosx^2) # soma de quadrados dos desvios da média
epb=s/sqrt(sxx) # erro padrão do beta
epa=s*sqrt(1/26+mean(dados$peso)^2/sxx) # erro padrão do intercepto
lim_inf95_b=reta_mq$coefficients[2]-epb*qt(0.975,24) # limite inferior do IC de 95% para beta
lim_sup95_b=reta_mq$coefficients[2]+epb*qt(0.975,24) # limite superior do IC de 95% para beta
lim_inf95_a=reta_mq$coefficients[1]-epa*qt(0.975,24) # limite inferior do IC de 95% para intercepto
lim_sup95_a=reta_mq$coefficients[1]+epa*qt(0.975,24) # limite superior do IC de 95% para intercepto
lim_inf95_sigma2=24*qmres/qchisq(0.975,24) # limite inferior do IC de 95% para sigma2
lim_sup95_sigma2=24*qmres/qchisq(0.025,24) # limite superior do IC de 95% para sigma2
print(c(lim_inf95_b,lim_sup95_b))
print(c(lim_inf95_a,lim_sup95_a))
print(c(lim_inf95_sigma2,lim_sup95_sigma2))
# Construção de gráficos
residuo_padronizado=(reta_mq$residuals-mean(reta_mq$residuals))/s
plot(dados$peso,dados$ps_sistolica,main="Diagrama de dispersao e reta de minimos quadrados",xlab="peso",ylab="pressão")
abline(reta_mq,lty=2)
points(mean(dados$peso),mean(dados$ps_sistolica),col="red")
win.graph()
par(mfrow=c(2,1))
plot(dados$peso,residuo_padronizado,main="Variavel explicativa versus Residuos padronizados",xlab="peso",ylab="residuos padronizados",ylim=c(-2.5,2.5))
abline(h=0,lty=2)
plot(reta_mq$fitted,residuo_padronizado,main="Valores ajustados versus Residuos padronizados",xlab="valores ajustados",ylab="residuos padronizados",ylim=c(-2.5,2.5))
abline(h=0,lty=2)
win.graph()
par(mfrow=c(2,1))
boxplot(residuo_padronizado,main="Boxplot dos residuos padronizados",ylim=c(-2.5,2.5))
qqnorm(residuo_padronizado,xlab="Quantis teoricos",ylab="Quantis amostrais",main="Normal plot dos residuos padronizados")
abline(0,1,lty=2)
abline(h=0,col="blue")
abline(v=0,col="blue")
sink()
rm=reta_mq$coefficients[1]+reta_mq$coefficients[2]
rm=reta_mq$coefficients[1]+reta_mq$coefficients[2]*172
ep_rm=s*sqrt(1/26+(172-mean(dados$peso))^2/sxx) # erro padrão do intercepto
rm=reta_mq$coefficients[1]+reta_mq$coefficients[2]*172
lim_inf95_rm=rm-ep_rm*qt(0.975,24) # limite inferior do IC de 95% para resp media
lim_sup95_rm=rm+ep_rm*qt(0.975,24) # limite superior do IC de 95% para resp media
p_ip=s*sqrt(1+1/26+(172-mean(dados$peso))^2/sxx) # erro padrão do intercepto
ip=reta_mq$coefficients[1]+reta_mq$coefficients[2]*172
lim_inf95_ip=ip-ep_ip*qt(0.975,24) # limite inferior do IC de 95% para resp media
lim_
ep_ip=s*sqrt(1+1/26+(172-mean(dados$peso))^2/sxx) # erro padrão do intercepto
ip=reta_mq$coefficients[1]+reta_mq$coefficients[2]*172
lim_inf95_ip=ip-ep_ip*qt(0.975,24) # limite inferior do IC de 95% para resp media
lim_sup95_ip=ip+ep_ip*qt(0.975,24) # limite superior do IC de 95% para resp media
dados
dados$ps_sistolica
dados$peso
len(dados$peso)
count(dados$peso)
quantile(dados$peso, 0.33)
quantile(dados$peso, 1/3)
quantile(dados$peso, c(1/3,2/3))
split(dados$peso, rep(1:3, length.out = length(dados$peso), each = ceiling(length(dados$peso)/3)))
pesos = split(dados$peso, rep(1:3, length.out = length(dados$peso), each = ceiling(length(dados$peso)/3)))
pesos$1
pesos[1]
pesos
values = dados$peso
pesos = split(dados$peso, rep(1:3, length.out = length(dados$peso), each = ceiling(length(dados$peso)/3)))
pesos[1]
pesos
pts = c(splited[1],splited[2],splited[3])
splited = split(values, rep(1:3, length.out = length(values), each = ceiling(length(values)/3)))
pts = c(splited[1],splited[2],splited[3])
pts
pts = c(median(splited[1]),median(splited[2]),median(splited[3]))
pts
values = order(dados$peso)
splited = split(values, rep(1:3, length.out = length(values), each = ceiling(length(values)/3)))
splited
View(splited)
View(splited)
View(splited)
View(pesos)
View(splited)
View(dados)
values = order(dados$peso)
values
values =
order(dados$peso)
values =
order(dados$peso)
values =
order(dados$peso)
values
View(dados)
View(dados)
values =
order(dados$peso)
values =
order(dados$peso)
order(dados$peso)
dados$peso
order(dados$peso)
attach(dados$peso)
sort(dados$peso)
splited = split(sorted, rep(1:3, length.out = length(sorted), each = ceiling(length(sorted)/3)))
sorted = sort(dados$peso)
splited = split(sorted, rep(1:3, length.out = length(sorted), each = ceiling(length(sorted)/3)))
pts = c(median(splited[1]),median(splited[2]),median(splited[3]))
pts
pts
median(splited[1])
sorted = sort(dados$peso)
splited = split(sorted, rep(1:3, length.out = length(sorted), each = ceiling(length(sorted)/3)))
pts = c(median(splited[1]),median(splited[2]),median(splited[3]))
splited
pts
median(splited[1])
splited[1]
c(splited[1])
unlist(splited[1])
median(unlist(splited[1]))
pts = c(median(unlist(splited[1])),median(unlist(splited[2])),median(unlist(splited[3])))
pts
sorted = sort(dados$peso)
splited = split(sorted, rep(1:3, length.out = length(sorted), each = ceiling(length(sorted)/3)))
pts = c(median(unlist(splited[1])),median(unlist(splited[2])),median(unlist(splited[3])))
pts
View(dados)
